import * as wmill from "windmill-client";

export async function main(
  openai_resource: RT.Openai,
  content: string,
  title: string,
  url: string,
  by: string,
  score: number
) {
  if (!content || content.trim().length === 0) {
    throw new Error('Content is required for summarization');
  }
  
  // Truncate content if it's too long (OpenAI has token limits)
  const maxContentLength = 8000; // Conservative limit to stay within token limits
  const truncatedContent = content.length > maxContentLength 
    ? content.substring(0, maxContentLength) + "..."
    : content;
  
  const prompt = `Please provide a concise summary of the following article titled "${title}":

${truncatedContent}

Summary:`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openai_resource.api_key}`,
        'Content-Type': 'application/json',
        ...(openai_resource.organization_id && { 'OpenAI-Organization': openai_resource.organization_id })
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 300,
        temperature: 0.3
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    const summary = data.choices[0]?.message?.content?.trim();

    if (!summary) {
      throw new Error('No summary generated by OpenAI');
    }

    return {
      title: title,
      summary: summary,
      url: url,
      by: by,
      score: score,
      originalContentLength: content.length,
      truncatedContentLength: truncatedContent.length,
      tokensUsed: data.usage?.total_tokens || 0
    };
  } catch (error) {
    throw new Error(`Failed to generate summary: ${error.message}`);
  }
}